trigger:
- main

stages:
# Build Stage 
- stage: Build
  displayName: Build Stage
  jobs:
  - job: Build
    displayName: Build Job
    pool:
      vmImage: 'ubuntu-latest'
    steps: 
## Publish Artifacts pipeline code in addition to Build and Push          
    - bash: echo Contents in System Default Working Directory; ls -R $(System.DefaultWorkingDirectory)        
    - bash: echo Before copying Contents in Build Artifact Directory; ls -R $(Build.ArtifactStagingDirectory)        
    # Task-2: Copy files (Copy files from a source folder to target folder)
    # Source Directory: $(System.DefaultWorkingDirectory)/terraform-manifests
    # Target Directory: $(Build.ArtifactStagingDirectory)
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/terraform-manifests'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        OverWrite: true
    # List files from Build Artifact Staging Directory - After Copy
    - bash: echo After copying to Build Artifact Directory; ls -R $(Build.ArtifactStagingDirectory)  
    # Task-3: Publish build artifacts (Publish build to Azure Pipelines)           
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'terraform-manifests'
        publishLocation: 'Container'
    - task: Bash@3
      inputs:
       targetType: 'inline'
       script: |
        mkdir TFSecReport
        docker pull tfsec/tfsec:latest
        docker run --rm -v "$(pwd):/src" tfsec/tfsec ./src --format JUnit --include-passed > TFSecReport/TFSec-Report.xml
        docker run --rm -v "$(pwd):/src" tfsec/tfsec ./src
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: TFSec Static Code Analysis
      condition: always()
      continueOnError: true
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: TFSec Report'
      condition: succeededOrFailed()
      inputs:
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: TFSecReport
 # Publish the results of the TFSec analysis as Test Results to the pipeline
    - task: PublishTestResults@2
      displayName: Publish TFSecReport Test Results
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit' # Options JUnit, NUnit, VSTest, xUnit, cTest
        testResultsFiles: '**/*TFSec-Report.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        searchFolder: '$(Build.ArtifactStagingDirectory)'
        testRunTitle: TFSec Scan
        mergeTestResults: false
        failTaskOnFailedTests: false
        publishRunAttachments: true